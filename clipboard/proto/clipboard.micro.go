// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/clipboard.proto

package orbli_micro_clipboard

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Clipboard service

type ClipboardService interface {
	Create(ctx context.Context, in *Message, opts ...client.CallOption) (*Message, error)
	Read(ctx context.Context, in *Message, opts ...client.CallOption) (*Message, error)
	Update(ctx context.Context, in *Message, opts ...client.CallOption) (*Message, error)
	Delete(ctx context.Context, in *Message, opts ...client.CallOption) (*Message, error)
}

type clipboardService struct {
	c    client.Client
	name string
}

func NewClipboardService(name string, c client.Client) ClipboardService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "orbli.micro.clipboard"
	}
	return &clipboardService{
		c:    c,
		name: name,
	}
}

func (c *clipboardService) Create(ctx context.Context, in *Message, opts ...client.CallOption) (*Message, error) {
	req := c.c.NewRequest(c.name, "Clipboard.Create", in)
	out := new(Message)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clipboardService) Read(ctx context.Context, in *Message, opts ...client.CallOption) (*Message, error) {
	req := c.c.NewRequest(c.name, "Clipboard.Read", in)
	out := new(Message)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clipboardService) Update(ctx context.Context, in *Message, opts ...client.CallOption) (*Message, error) {
	req := c.c.NewRequest(c.name, "Clipboard.Update", in)
	out := new(Message)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clipboardService) Delete(ctx context.Context, in *Message, opts ...client.CallOption) (*Message, error) {
	req := c.c.NewRequest(c.name, "Clipboard.Delete", in)
	out := new(Message)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Clipboard service

type ClipboardHandler interface {
	Create(context.Context, *Message, *Message) error
	Read(context.Context, *Message, *Message) error
	Update(context.Context, *Message, *Message) error
	Delete(context.Context, *Message, *Message) error
}

func RegisterClipboardHandler(s server.Server, hdlr ClipboardHandler, opts ...server.HandlerOption) error {
	type clipboard interface {
		Create(ctx context.Context, in *Message, out *Message) error
		Read(ctx context.Context, in *Message, out *Message) error
		Update(ctx context.Context, in *Message, out *Message) error
		Delete(ctx context.Context, in *Message, out *Message) error
	}
	type Clipboard struct {
		clipboard
	}
	h := &clipboardHandler{hdlr}
	return s.Handle(s.NewHandler(&Clipboard{h}, opts...))
}

type clipboardHandler struct {
	ClipboardHandler
}

func (h *clipboardHandler) Create(ctx context.Context, in *Message, out *Message) error {
	return h.ClipboardHandler.Create(ctx, in, out)
}

func (h *clipboardHandler) Read(ctx context.Context, in *Message, out *Message) error {
	return h.ClipboardHandler.Read(ctx, in, out)
}

func (h *clipboardHandler) Update(ctx context.Context, in *Message, out *Message) error {
	return h.ClipboardHandler.Update(ctx, in, out)
}

func (h *clipboardHandler) Delete(ctx context.Context, in *Message, out *Message) error {
	return h.ClipboardHandler.Delete(ctx, in, out)
}
